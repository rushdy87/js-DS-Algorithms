JavaScript Objects
- JavaScript objects can be created via: 
    the object literal {} 
    or via the syntax new Object();
properties can be added or accessed in one of two ways: 
    object.propertyName 
    or object['propertyName'].
___________________________________________________________
Prototypal Inheritance:
  - in JavaScript, the function has to be added as a 
  JavaScript Object property of that class.
          function ExampleClass() {
            this.name = 'JavaScript';
            this.sayName = function() {
              console.log(this.name);
            };
          }

          const obj = new ExampleClass();
          obj.sayName();
  This class dynamically adds the sayName function in 
  the constructor. This pattern is known as prototypal 
  inheritance.
  To add functions of a class, simply use the .prototype 
  property and specify the name of function.
          function ExampleClass() {
            this.name = 'JavaScript';
          }
          const obj = new ExampleClass();
          ExampleClass.prototype.sayName = function() {
            console.log(this.name);
          };
___________________________________________________________
Constructor and Variables
  - the objectâ€™s properties can be directly accessed in 
  other scopes.
  - To mimic a private variable, instead of using this
  .propertyName, you can declare a local variable and 
  have getter/setters that allow access to that variable.
        function ExampleClass(name, size) {
            let privateName = name;
            let privateSize = size;

            this.getName = function() {return privateName;}
            this.setName  = function(name) {privateName = name;}

            this.getSize = function() {return privateSize;}
            this.setSize = function(size) {privateSize = size;}
        }

        const example = new ExampleClass("Sammie",3);
        example.setSize(12);
        console.log(example.privateName); // undefined
        console.log(example.getName());  // "Sammie"
        console.log(example.size); // undefined 
        console.log(example.getSize()); // 3